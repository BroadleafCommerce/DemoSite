###
# #%L
# Community Demo Core
# %%
# Copyright (C) 2009 - 2024 Broadleaf Commerce
# %%
# Licensed under the Broadleaf Fair Use License Agreement, Version 1.0
# (the "Fair Use License" located  at http://license.broadleafcommerce.org/fair_use_license-1.0.txt)
# unless the restrictions on use therein are violated and require payment to Broadleaf in which case
# the Broadleaf End User License Agreement (EULA), Version 1.1
# (the "Commercial License" located at http://license.broadleafcommerce.org/commercial_license-1.1.txt)
# shall apply.
# 
# Alternatively, the Commercial License may be replaced with a mutually agreed upon license (the "Custom License")
# between you and Broadleaf Commerce. You may not use this file except in compliance with the applicable license.
# #L%
###
# These settings override and append settings in:

# common-shared.properties

# Please see common-shared.properties for more information on how the properties files work
    
# Allows us to load demo images from the classpath.   This would be an expensive approach
# for most implementations and should only be done in dev.   Images should be on a 
# shared file system or the DB when in non-development environments
asset.server.file.classpath.directory=/cms/static

# Because we are blanking the value out here, broadleaf will use System.setProperty("java.io.tmpdir")
# This would NOT make sense in non-development environments since the OS may delete files in that
# directory.
# 
# In non-development environments, this defaults to "/broadleaf/assets".
asset.server.file.system.path=

blPU.hibernate.hbm2ddl.auto=create
blCMSStorage.hibernate.hbm2ddl.auto=update
blSecurePU.hibernate.hbm2ddl.auto=update
blEventPU.hibernate.hbm2ddl.auto=create

# Cache page templates for just 2 seconds in development (allows for caching during a single request)
cache.page.templates.ttl=2000
messages.cacheSeconds=2
cache.entity.dao.metadata.ttl=2000
thymeleaf.view.resolver.cache=false


# Note that when bundle.enabled is normally set to false in development as changes to 
# file based resources (like CSS and JS) will not be picked up until the server is restarted 
# if this setting is true   
bundle.enabled=false

# Don't version resources in development.   If this property is true then changes to resources
# on the file-system will require a server restart to be picked up.
# 
# Used by blc:bundle and blc:resource tags to better support client-side browser
# caching (see the "staticResourceBrowserCacheSeconds" property below). 
resource.versioning.enabled=false

# Add no-cache headers to static resources in development to simplify debugging.
#
# This property represents the number of seconds to add to static file cache headers.    This property is used
# in the "demo" applicationContext.xml to set the cache-seconds property for 
# HTTPResourceHandlers    
# See org.springframework.web.servlet.resource.ResourceHttpRequestHandler
staticResourceBrowserCacheSeconds=0

# Don't minify static resources (JS and CSS) in dev as it makes debugging to difficult
minify.enabled=false

# Don't cache resources or transformations in development
resource.transformer.caching.enabled=false
resource.caching.enabled=false

# BaseURL Config
site.baseurl=http://localhost:8080
admin.baseurl=http://localhost:8081/admin

crossapp.requireSsl=false

jcache.disable.cache=true

#Enable exploit protection for Admin
exploitProtection.xssEnabled=true
exploitProtection.xsrfEnabled=true
#Enable exploit protection for Site
blc.site.enable.xssWrapper=true
